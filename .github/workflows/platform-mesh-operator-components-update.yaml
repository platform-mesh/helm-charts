name: platform-mesh-operator-components Bump Versions

on:
  workflow_dispatch:

concurrency:
  group: platform-mesh-operator-components-update-${{ github.ref }}
  cancel-in-progress: true

permissions:
  packages: read
  contents: read

jobs:
  bump-versions:
    runs-on: ubuntu-latest
    steps:
      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/create-github-app-token@67018539274d69449ef7c02e8e71183d1719ab42 # v2
        id: app-token
        with:
          app-id: "1415820"
          private-key: ${{ secrets.PM_PUBLISHER_PRIVATE_KEY }}
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          ref: main
          token: ${{ steps.app-token.outputs.token }}
      - name: Configure GIT
        run: |
          git config --global user.name "PlatformMesh Publisher"
          git config --global user.email "platformmesh@gmail.com"
      - name: setup OCM CLI
        run: |
          REPO=${repo:=open-component-model/ocm}
          if [ -z "$version" -o "$version" == latest ]; then
            version="$(basename "$(curl -Ls -o /dev/null -w %{url_effective} https://github.com/$REPO/releases/latest)")"
            echo "Selecting latest version: $version"
          fi
          VERSION=${version#v}
          ARCHIVE_FILE="ocm-${VERSION}-linux-amd64.tar.gz"
          URL="https://github.com/$REPO/releases/download/v${VERSION}/$ARCHIVE_FILE"
          echo "Installing ocm-cli version $version from $REPO"
          curl -LsS -o ocm-cli.tgz "$URL"
          tar --overwrite -xvzf ocm-cli.tgz >/dev/null
          rm ocm-cli.tgz
          chmod a+x ocm
          mkdir -p ./bin
          mv ocm ./bin/ocm
      - name: Write Credentials file
        run: |
          cat <<EOF > $HOME/.ocmconfig
          type: generic.config.ocm.software/v1
          configurations:
            - type: credentials.config.ocm.software
              consumers:
                - identity:
                    type: OCIRegistry
                    scheme: https
                    hostname: ghcr.io
                    pathprefix: platform-mesh
                  credentials:
                    - type: Credentials
                      properties:
                        username: github
                        password: ${{ secrets.GITHUB_TOKEN }}
          EOF
      - name: Bump Versions
        run: task bump-component-versions
      - name: Check for pending changes
        id: changes
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi
      - name: Show git status
        if: steps.changes.outputs.changed == 'true'
        run: git status --porcelain
      - name: Setup yq@latest
        if: steps.changes.outputs.changed == 'true'
        run: |
          if ! command -v yq &>/dev/null
          then
            mkdir -p /home/runner/.local/bin
            wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /home/runner/.local/bin/yq &&\
              chmod +x /home/runner/.local/bin/yq
          fi
      - name: Set up Helm
        if: steps.changes.outputs.changed == 'true'
        uses: azure/setup-helm@1a275c3b69536ee54be43f2070a358922e12c8d4 # v4.3.1
        with:
          version: v3.14.4
      - name: Update Snapshot Tests
        if: steps.changes.outputs.changed == 'true'
        run: |
          helm plugin install https://github.com/helm-unittest/helm-unittest.git
          helm unittest -u ./charts/platform-mesh-operator-components
      - name: Update docs
        if: steps.changes.outputs.changed == 'true'
        run: task docs
      - name: Bump Chart Version, commit and push
        if: steps.changes.outputs.changed == 'true'
        run: |
          chart_file="charts/platform-mesh-operator-components/Chart.yaml"
          chart_repo="charts/platform-mesh-operator-components"
          
          # bump version parameter in chart
          CHART_VERSION=$(yq '.version' "$chart_file")
          IFS='.' read -r -a VERSION_PARTS <<< "$CHART_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          NEW_PATCH=$((PATCH + 1))
          NEW_CHART_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          yq e -i ".version = \"$NEW_CHART_VERSION\"" "$chart_file"
          echo "Version bumped to $NEW_CHART_VERSION in $chart_file"
          
          git add "$chart_repo"
          git commit -m "Bump Versions and updating version to $NEW_CHART_VERSION in $chart_file" || echo "appVersion was already up to date"
          
          git push origin main
          echo "Pushed changes to main"
          git show HEAD

version: '3'

vars:
  LOCAL_BIN: bin
  CHARTS:
    sh: "printf '%s' $(ls -d charts/*/ | paste -sd ',' -)"
  CHANGED_CHARTS:
    sh: "git status --porcelain | grep '^ M charts/' | cut -d'/' -f2 | sort -u | sed 's|^|charts/|' | paste -sd ',' -"
  PACKAGED_CHARTS:
    sh: "ls oci/ | sed 's/^/oci\\//g' | paste -sd ',' -"
  GOOS:
    sh: go env GOOS
  GOARCH:
    sh: go env GOARCH
  OCM_VERSION: 0.29.0
  COMPONENT_VERSION: "1.0.0"
  CUSTOM_LOCAL_COMPONENTS_CHART_PATHS:
    - iam-service: ../helm-charts-priv/charts/iam-service
  COMPONENT_VERSION_FIX_DEPEDENCY_VERSIONS: []
    # - keycloak: 0.64.11

tasks:
  ## Setup
  setup:kube-lint:
    internal: true
    cmds:
      - mkdir -p $(pwd)/{{.LOCAL_BIN}}
      - test -s {{.LOCAL_BIN}}/kube-linter || GOBIN=$(pwd)/{{.LOCAL_BIN}} go install golang.stackrox.io/kube-linter/cmd/kube-linter@latest
      - chmod +x $(pwd)/{{.LOCAL_BIN}}/kube-linter
  setup:helm-docs:
    internal: true
    cmds:
      - test -s {{.LOCAL_BIN}}/helm-docs || GOBIN=$(pwd)/{{.LOCAL_BIN}} go install github.com/norwoodj/helm-docs/cmd/helm-docs@v1.14.2
  setup:mkcert:
    internal: true
    cmds:
      - test -s {{.LOCAL_BIN}}/mkcert || GOBIN=$(pwd)/{{.LOCAL_BIN}} go install filippo.io/mkcert@latest
      - export PATH=$(pwd)/{{.LOCAL_BIN}}:$PATH
  setup:ocm:
    internal: true
    deps: 
      -  task: setup:mkbin
    cmds:
      - test -s {{.LOCAL_BIN}}/ocm || (curl -o {{.LOCAL_BIN}}/ocm.tar.gz -sSL https://github.com/open-component-model/ocm/releases/download/v{{ .OCM_VERSION }}/ocm-{{ .OCM_VERSION }}-{{ .GOOS }}-{{ .GOARCH }}.tar.gz && tar -xzf {{ .LOCAL_BIN }}/ocm.tar.gz -C {{ .LOCAL_BIN }} && rm {{ .LOCAL_BIN}}/ocm.tar.gz && chmod +x {{.LOCAL_BIN}}/ocm && chmod 755 {{.LOCAL_BIN}}/ocm)
  setup:mkbin:
    internal: true
    cmds:
      - mkdir -p $(pwd)/{{.LOCAL_BIN}}


  ## Development
  lint:
    deps: []
    cmds:
      - "ct lint --target-branch main --chart-dirs=charts --validate-maintainers=false --chart-repos=bitnami=https://charts.bitnami.com/bitnami,openfga=https://openfga.github.io/helm-charts"
  helmtest:
    cmds:
      - "for chart in $(echo {{.CHARTS}} | tr ',' ' '); do helm unittest $chart; done"
  helmtest-update:
    cmds:
      - "for chart in $(echo {{.CHARTS}} | tr ',' ' '); do helm unittest -u $chart; done"
  test:
    deps:
      - task: helmtest
  update-changed:
    deps:
      - task: docs
    cmds:
      - "for chart in $(echo {{.CHANGED_CHARTS}} | tr ',' ' '); do helm dependency update $chart && helm unittest -u $chart; done"
  update:
    deps:
      - task: docs
    cmds:
      - "for chart in $(echo {{.CHARTS}} | tr ',' ' '); do helm dependency update $chart; done"
  validate:
    cmds:
      - task: test
      - task: docs
      - task: update
      - task: lint
      - task: oci
  vulnerability:
    deps:
      - task: setup:kube-lint
    cmds:
      - "{{.LOCAL_BIN}}/kube-linter lint \"charts/\" --format \"plain\""
  docs:
    deps:
      - task: setup:helm-docs
    cmds:
      - "for chart in $(echo {{.CHARTS}} | tr ',' ' '); do {{.LOCAL_BIN}}/helm-docs --log-level=debug --chart-search-root $chart --template-files=../../docs-templates/header.md.gotmpl,README.md.gotmpl,../../docs-templates/footer.md.gotmpl --skip-version-footer=false; done"
  oci:
    cmds:
      - "rm oci/* || true"
      - task: helmpackage
  local-setup:iterate:
    deps:
      - task: setup:mkcert
    cmds:
      - ./local-setup/scripts/start.sh
  local-setup:
    deps:
      - task: setup:mkcert
    cmds:
      - |
        read -r -p "Are you sure you want to delete the cluster? [y/N] " response && if [ "$response" != "y" ]; then echo "Aborted."; exit 1; fi
        kind delete cluster --name platform-mesh
        ./local-setup/scripts/start.sh

  local-setup-cached:
    deps:
      - task: setup:mkcert
    cmds:
      - read -r -p "Are you sure you want to delete the cluster? [y/N] " response && if [ "$response" != "y" ]; then echo "Aborted."; exit 1; fi
      - kind delete cluster --name platform-mesh
      - ./local-setup/scripts/start.sh --cached

  local-setup-cached:iterate:
    cmds:
      - ./local-setup/scripts/start.sh --cached

  bump-component-versions:
    deps: [setup:ocm]
    cmds:
      - |
        COMP_VERSION_JSON=$(bin/ocm get componentversions github.com/platform-mesh/platform-mesh --latest --repo ghcr.io/platform-mesh -o json)
        SERVICES=$(echo ''$COMP_VERSION_JSON'' | jq -r '.items[0] | .component.componentReferences[] | .name')
        COMPONENT_VERSION=$(echo ''$COMP_VERSION_JSON'' | jq -r '.items[0] | .component["version"]')
        echo "Bumping component version to $COMPONENT_VERSION"
        yq -i '.componentVersion.semver = "'$COMPONENT_VERSION'"' charts/platform-mesh-operator-components/values.yaml

  ocm:deploy-oci-registry:
    cmds:
      - |
        helm repo add twuni https://helm.twun.io
        helm repo update
        kubectl create ns registry || true
        helm upgrade --install oci-registry twuni/docker-registry -n registry --set service.port=443 --set tlsSecretName=domain-certificate

        kubectl create secret generic domain-certificate -n registry \
          --from-file=tls.crt=./local-setup/scripts/certs/cert.crt \
          --from-file=tls.key=./local-setup/scripts/certs/cert.key \
          --from-file=ca.crt=./local-setup/scripts/certs/ca.crt \
          --type=kubernetes.io/tls --dry-run=client -oyaml | kubectl apply -f -
        
        kubectl wait --namespace registry \
          --for=condition=available deployment \
          --timeout=120s oci-registry-docker-registry

      - task: ocm:prime:tls
      - task: ocm:registry:port-forward

  ocm:check:dns:
    cmds:
      - |
        grep -q "oci-registry-docker-registry.registry.svc.cluster.local" /etc/hosts || echo "127.0.0.1 oci-registry-docker-registry.registry.svc.cluster.local" | sudo tee -a /etc/hosts

  ocm:registry:port-forward:
    desc: Start (or reuse) local 9443 -> registry svc port-forward
    deps:
      - task: ocm:check:dns
    cmds:
      - |
        set -e
        NS=registry
        CTX=kind-platform-mesh
        SVC=oci-registry-docker-registry
        LPORT=9443
        RPORT=443
        PIDFILE="{{.TASKFILE_DIR}}/ocm-reg-pf.pid"
        LOG="{{.TASKFILE_DIR}}/ocm-reg-pf.log"

        if [ -f "$PIDFILE" ] && kill -0 "$(cat "$PIDFILE")" 2>/dev/null; then
          echo "Port-forward already running (pid $(cat "$PIDFILE"))"
          exit 0
        fi

        # If something already listens, optionally treat as success or at least capture PID.
        if lsof -i :"$LPORT" -sTCP:LISTEN >/dev/null 2>&1; then
          echo "Port $LPORT already in use; reusing existing listener."
          PF_PID=$(lsof -i :"$LPORT" -sTCP:LISTEN -t 2>/dev/null | head -n1 || true)
          if [ -n "$PF_PID" ]; then echo "$PF_PID" > "$PIDFILE"; fi
          exit 0
        fi

        echo "Starting port-forward $LPORT -> $SVC:$RPORT"
        # Detach into a new session so Task doesn't kill it when the dependency ends.
        nohup setsid kubectl --context "$CTX" -n "$NS" port-forward svc/"$SVC" "$LPORT:$RPORT" >"$LOG" 2>&1 &

        PF_PID=""
        for i in $(seq 1 40); do
          sleep 0.25
          if [ -z "$PF_PID" ]; then
            PF_PID=$(lsof -i :"$LPORT" -sTCP:LISTEN -t 2>/dev/null | head -n1 || true)
            if [ -n "$PF_PID" ]; then
              echo "$PF_PID" > "$PIDFILE"
              echo "Started kubectl (pid $PF_PID)"
            fi
          fi
          if lsof -i :"$LPORT" -sTCP:LISTEN >/dev/null 2>&1; then
            echo "Port-forward established (pid ${PF_PID:-unknown})"
            exit 0
          fi
          if [ -n "$PF_PID" ] && ! kill -0 "$PF_PID" 2>/dev/null; then
            echo "kubectl exited early; log tail:"
            sed -e 's/^/  /' "$LOG" | tail -n 40
            rm -f "$PIDFILE"
            exit 1
          fi
        done

        echo "Timed out waiting for port-forward; last log lines:"
        tail -n 40 "$LOG"
        exit 1

  ocm:registry:port-forward:stop:
    desc: Stop the registry port-forward
    cmds:
      - |
        PIDFILE=./ocm-reg-pf.pid
        if [ -f "$PIDFILE" ] && kill -0 "$(cat "$PIDFILE")" 2>/dev/null; then
          kill "$(cat "$PIDFILE")" && echo "Stopped port-forward (pid $(cat $PIDFILE))"
        else
          echo "No running port-forward."
        fi
        rm -f "$PIDFILE"



  ocm:prime:tls:
    cmds:
      - |
        if [ -e 'local-setup/rootCA.pem' ]; then
          echo "Root CA already exists, skipping download."
        else
          kubectl get secret domain-certificate -n registry -o jsonpath="{.data['tls\.crt']}" | base64 -d > local-setup/rootCA.pem
          echo 'installing root certificate into local trust store...'
          CAROOT=local-setup ./bin/mkcert -install
          rootCAPath="./local-setup/rootCA.pem"

          if [ -e '/etc/ssl/certs/ca-certificates.crt' ]; then
            echo "updating root certificate"
            sudo cat "${rootCAPath}" | sudo tee -a /etc/ssl/certs/ca-certificates.crt || echo "failed to append to ca-certificates. Ignoring the failure"
          fi
        fi

  ocm:patch:component:
    desc: "Patch Component spec.repository.url and spec.version.semver (override with PATCH_REPO_URL / PATCH_SEMVER)"
    vars:
      COMPONENT_VERSION_NAME: '{{ .COMPONENT_VERSION_NAME | default "platform-mesh" }}'
      COMPONENT_VERSION_NAMESPACE: '{{ .COMPONENT_VERSION_NAMESPACE | default "default" }}'
      PATCH_REPO_URL: '{{ .PATCH_REPO_URL | default "oci://oci-registry-docker-registry.registry.svc.cluster.local:9443/platform-mesh" }}'
      INCLUSTER_PATCH_REPO_URL: '{{ .INCLUSTER_PATCH_REPO_URL | default "oci://oci-registry-docker-registry.registry.svc.cluster.local/platform-mesh" }}'
    cmds:
      - |
        COMPONENT_VERSION_NAME="{{.COMPONENT_VERSION_NAME}}"
        COMPONENT_VERSION_NAMESPACE="{{.COMPONENT_VERSION_NAMESPACE}}"
        PATCH_REPO_URL="{{.PATCH_REPO_URL}}"
        INCLUSTER_PATCH_REPO_URL="{{.INCLUSTER_PATCH_REPO_URL}}"
        echo "Version: {{ .COMPONENT_VERSION }}"
        echo "Patching ComponentVersion $COMPONENT_VERSION_NAME in namespace $COMPONENT_VERSION_NAMESPACE"
        echo "  -> repository.url = ${INCLUSTER_PATCH_REPO_URL}"
        echo "  -> version.semver  = {{ .COMPONENT_VERSION }}"
        kubectl -n "$COMPONENT_VERSION_NAMESPACE" patch component.delivery.ocm.software "$COMPONENT_VERSION_NAME" --type=merge -p "{\"spec\":{\"semver\":\"{{ .COMPONENT_VERSION }}\"}}"


        # patch repository
        kubectl  patch repository.delivery.ocm.software "$COMPONENT_VERSION_NAME" --type=merge -p "{\"spec\":{\"repositorySpec\":{\"baseUrl\":\"${INCLUSTER_PATCH_REPO_URL}\"}}}"


        echo "Patch applied."
  
  ocm:build:custom-local-charts:
    deps:
      - task: setup:ocm
      - task: ocm:registry:port-forward
    cmds:
      - kubectl cp .ocm/component-constructor-prerelease.yaml -n default ocm-transfer-pod:.ocm/component-constructor-prerelease.yaml
      - |
        set -e
        echo "Building custom local charts from {{ .CUSTOM_LOCAL_COMPONENTS_CHART_PATHS }}"

        # Iterate key:path pairs rendered from the mapping list
        for pair in {{ range .CUSTOM_LOCAL_COMPONENTS_CHART_PATHS }}"{{ range $k,$v := . }}{{$k}}:{{$v}}{{ end }}" {{ end }}; do
          comp="${pair%%:*}"
          COMPONENT=$comp
          CHART_DIR="${pair#*:}"
          echo "Processing $CHART_DIR"
          comp="$(echo "$comp" | xargs)"
          
          # Try to get the value of $comp from .ocm/component-constructor-platform-mesh.yaml componentReferences
          COMPONENT_NAME=$(yq -r ".components[] | select(.name == \"github.com/platform-mesh/platform-mesh\") | .componentReferences[] | select(.name == \"$comp\") | .componentName" .ocm/component-constructor-platform-mesh.yaml 2>/dev/null || true)
          if [ -z "$COMPONENT_NAME" ]; then
            COMPONENT_NAME=$(yq -r ".components[] | select(.name == \"github.com/platform-mesh/platform-mesh-priv\") | .componentReferences[] | select(.name == \"$comp\") | .componentName" .ocm/component-constructor-platform-mesh-priv.yaml 2>/dev/null || true)
          fi

          comp=$COMPONENT_NAME
          echo ".ocm/component-constructor-platform-mesh.yaml name for $COMPONENT_NAME"

          CHART_DIR="$(echo "$CHART_DIR" | xargs)"
          [ -z "$comp" ] && continue

          echo "Component: $comp (chart dir: $CHART_DIR)"

          CHART_VERSION=$(grep '^version:' "$CHART_DIR/Chart.yaml" | sed 's/^version: //')
            : "${CHART_VERSION:?Failed to read version for $comp}"
          APP_VERSION=$(yq -r '.appVersion // ""' "$CHART_DIR/Chart.yaml" 2>/dev/null || true)

          out="$(helm package "$CHART_DIR")"
          TARBALL="$(echo "$out" | awk -F': ' '/saved it to:/ {print $2}')"
          if [ ! -f "$TARBALL" ]; then
            echo "Failed to package $comp"
            exit 1
          fi

          helm push "$TARBALL" oci://oci-registry-docker-registry.registry.svc.cluster.local:9443/platform-mesh
          echo "Pushed $TARBALL to local oci registry"

          IMAGE_NAME=$(yq '.image["name"] // ""' "$CHART_DIR/values.yaml")
          COMPONENT_NAME="$comp"
          CHART_REPO="$COMPONENT_NAME"
          CLEAN_CHART_REPO="${CHART_REPO#./}"
          LOCAL_CHART_PATH="$CLEAN_CHART_REPO"
          COMMIT=$(git rev-parse HEAD)
          LOCAL_CHART_PATH=../$CHART_DIR
          CHART_OCI_PATH=oci://oci-registry-docker-registry.registry.svc.cluster.local/platform-mesh/$COMPONENT
          VERSION=$CHART_VERSION

          echo ""
          echo "VERSION=$VERSION"
          echo "APP_VERSION=$APP_VERSION"
          echo "IMAGE_NAME=$IMAGE_NAME"
          echo "COMMIT=$COMMIT"
          echo "IMAGE_REPO_SHA=$IMAGE_REPO_SHA"
          echo "CHART_REPO=$CHART_REPO"
          echo "COMPONENT_NAME=$COMPONENT_NAME"
          echo "CHART_OCI_PATH=$CHART_OCI_PATH"
          echo "LOCAL_CHART_PATH=$LOCAL_CHART_PATH"
          echo ""

          set -x
          export OCMCONFIG=~/.ocmconfig
          echo "Adding component: $COMPONENT_NAME version $VERSION"
          CHART_REAL_NAME=$(grep '^name:' "$CHART_DIR/Chart.yaml" | awk '{print $2}')
          CHART_LOCATION="oci://oci-registry-docker-registry.registry.svc.cluster.local:9443/platform-mesh/${CHART_REAL_NAME}:$CHART_VERSION"
          
          kubectl exec -ti ocm-transfer-pod -- ocm add components -c --templater=go --file ".ocm/transport.ctf" .ocm/component-constructor-prerelease.yaml -- \
          VERSION=$VERSION \
          APP_VERSION=$APP_VERSION \
          IMAGE_NAME=$IMAGE_NAME \
          COMMIT=$COMMIT \
          IMAGE_REPO_SHA=$COMMIT \
          CHART_REPO=$CHART_REPO \
          COMPONENT_NAME=$COMPONENT_NAME \
          CHART_OCI_PATH=$CHART_OCI_PATH \
          LOCAL_CHART_PATH=$LOCAL_CHART_PATH

          echo "Done: $comp"
          echo
        done

        echo "Completed building custom local charts."
      - task: ocm:transfer:dir-to-local-oci

  ocm:configure:tls:
    desc: Apply ocm-k8s-toolkit patch to support oci registry with self-signed certs
    cmds:
      - local-setup/scripts/configureOcmTls.sh

  ocm:build:platform-mesh:
    deps: 
      - task: ocm:build:custom-local-charts
    cmds:
      - kubectl cp .ocm/component-constructor-platform-mesh.yaml -n default ocm-transfer-pod:.ocm/component-constructor-platform-mesh.yaml
      - |
        # Build comma-separated list of local component names from CUSTOM_LOCAL_COMPONENTS_CHART_PATHS
        CUSTOM_LOCAL_COMPONENTS="$(printf '%s' "{{ range .CUSTOM_LOCAL_COMPONENTS_CHART_PATHS }}{{ range $k,$v := . }}{{$k}},{{ end }}{{ end }}" | sed 's/,$//')"

        # Build space-separated key:version pairs from COMPONENT_VERSION_FIX_DEPEDENCY_VERSIONS
        FIXED_VERSION_PAIRS="{{ range .COMPONENT_VERSION_FIX_DEPEDENCY_VERSIONS }}{{ range $k,$v := . }}{{$k}}:{{$v}} {{ end }}{{ end }}"

        is_local() {
          echo ",$CUSTOM_LOCAL_COMPONENTS," | grep -q ",$1,"
        }

        get_component_version() {
          short="$1"
          component="$2"
          chart="$3"
          env_var="$4"

          # 1. Fixed override?
          for pair in $FIXED_VERSION_PAIRS; do
            name="${pair%%:*}"
            ver="${pair#*:}"
            if [ "$short" = "$name" ] && [ -n "$ver" ] && [ "$ver" != "$name" ]; then
              echo "Using FIXED override version for $short -> $ver"
              export "$env_var"="$ver"
              kubectl exec -ti ocm-transfer-pod -- ocm transfer componentversion --copy-resources --no-update ghcr.io/platform-mesh//$component:$ver oci://oci-registry-docker-registry.registry.svc.cluster.local/platform-mesh

              return 0
            fi
          done

          # 2. Local chart?
          if is_local "$short" && [ -n "$chart" ] && [ -f "$chart/Chart.yaml" ]; then
            val=$(grep '^version:' "$chart/Chart.yaml" | sed 's/^version: //')
            echo "Using LOCAL chart version for $short -> $val"
          else
            # 3. Remote latest
            val=$(./bin/ocm get componentversions --latest "$component" --repo ghcr.io/platform-mesh -o json | jq -r '.items[0].component.version')
            echo "Using REMOTE component version for $short -> $val"
            ./bin/ocm transfer componentversion --copy-resources --no-update ghcr.io/platform-mesh//$component:$val https://oci-registry-docker-registry.registry.svc.cluster.local:9443/platform-mesh
            ./bin/ocm transfer componentversion --copy-resources --no-update ghcr.io/platform-mesh//$component:$val directory::.ocm/transport.ctf
          fi
          export "$env_var"="$val"
        }

        # Retrieve versions (add chart path only for those that can be local)
        get_component_version account-operator github.com/platform-mesh/account-operator charts/account-operator ACCOUNT_OPERATOR_VERSION
        get_component_version security-operator github.com/platform-mesh/security-operator charts/security-operator SECURITY_OPERATOR_VERSION
        get_component_version extension-manager-operator github.com/platform-mesh/extension-manager-operator charts/extension-manager-operator EXTENSION_MANAGER_OPERATOR_VERSION
        get_component_version infra github.com/platform-mesh/infra charts/infra INFRA_VERSION
        get_component_version rebac-authz-webhook github.com/platform-mesh/rebac-authz-webhook charts/rebac-authz-webhook REBAC_AUTHZ_WEBHOOK_VERSION
        get_component_version portal github.com/platform-mesh/portal ../helm-charts/charts/portal/ PORTAL_VERSION
        get_component_version platform-mesh-operator github.com/platform-mesh/platform-mesh-operator charts/platform-mesh-operator/ PLATFORM_MESH_OPERATOR_VERSION
        get_component_version kubernetes-graphql-gateway github.com/platform-mesh/kubernetes-graphql-gateway charts/kubernetes-graphql-gateway KUBERNETES_GRAPHQL_GATEWAY_VERSION
        get_component_version virtual-workspaces github.com/platform-mesh/virtual-workspaces charts/virtual-workspaces VIRTUAL_WORKSPACES_VERSION
        get_component_version virtual-workspaces github.com/bitnami/keycloak ../helm-charts/keycloak/ KEYCLOAK_VERSION
        # Add more mappings as needed

        PLATFORMMESH_VERSION={{ .COMPONENT_VERSION }}

        ocm_ctf=.ocm/transport.ctf
        mkdir -p "$(dirname "$ocm_ctf")"

        env | grep _VERSION | sort

        kubectl exec -ti ocm-transfer-pod -- ocm add components -c --templater=go --file ".ocm/transport.ctf" .ocm/component-constructor-platform-mesh.yaml -- \
        VERSION=$PLATFORMMESH_VERSION \
        ISTIO_VERSION=1.25.0 \
        CROSSPLANE_VERSION=1.9.2 \
        ACCOUNT_OPERATOR_VERSION=$ACCOUNT_OPERATOR_VERSION \
        PLATFORM_MESH_OPERATOR_VERSION=$PLATFORM_MESH_OPERATOR_VERSION \
        EXTENSION_MANAGER_OPERATOR_VERSION=$EXTENSION_MANAGER_OPERATOR_VERSION \
        SECURITY_OPERATOR_VERSION=$SECURITY_OPERATOR_VERSION \
        REBAC_AUTHZ_WEBHOOK_VERSION=$REBAC_AUTHZ_WEBHOOK_VERSION \
        INFRA_VERSION=$INFRA_VERSION \
        KUBERNETES_GRAPHQL_GATEWAY_VERSION=$KUBERNETES_GRAPHQL_GATEWAY_VERSION \
        PORTAL_VERSION=$PORTAL_VERSION \
        OPENFGA_VERSION=0.2.38 \
        KCP_OPERATOR_VERSION=0.1.1 \
        GARDENER_ETCD_DRUID_SOURCE_REF=v0.31.0 \
        GARDENER_ETCD_DRUID_CHART_VERSION=0.1.0 \
        KEYCLOAK_VERSION=$KEYCLOAK_VERSION \
        VIRTUAL_WORKSPACES_VERSION=$VIRTUAL_WORKSPACES_VERSION

        echo
        echo "Built component version $COMPONENT_VERSION (local overrides: $CUSTOM_LOCAL_COMPONENTS)"

      - task: ocm:transfer:dir-to-local-oci
      - task: ocm:patch:component
        vars: { COMPONENT_VERSION_NAME: 'platform-mesh', COMPONENT_VERSION_NAMESPACE: 'default' }

  ocm:build:platform-mesh-priv:
    deps: 
      - task: ocm:registry:port-forward
      - task: ocm:build:custom-local-charts
    cmds:
      - kubectl cp .ocm/component-constructor-platform-mesh-priv.yaml -n default ocm-transfer-pod:.ocm/component-constructor-platform-mesh-priv.yaml
      - |
        echo {{ .COMPONENT_VERSION }}

        yq -i '.spec.semver = "{{ .COMPONENT_VERSION }}"' local-setup/kustomize/overlays/ocm-prerelease/platformmesh-priv-component.yml
        kubectl apply -k local-setup/kustomize/overlays/ocm-prerelease && sleep 5
      - |
        # set -x
        # Build comma-separated list of local component names from CUSTOM_LOCAL_COMPONENTS_CHART_PATHS
        CUSTOM_LOCAL_COMPONENTS="$(printf '%s' "{{ range .CUSTOM_LOCAL_COMPONENTS_CHART_PATHS }}{{ range $k,$v := . }}{{$k}},{{ end }}{{ end }}" | sed 's/,$//')"

        # Build space-separated key:version pairs from COMPONENT_VERSION_FIX_DEPEDENCY_VERSIONS
        FIXED_VERSION_PAIRS="{{ range .COMPONENT_VERSION_FIX_DEPEDENCY_VERSIONS }}{{ range $k,$v := . }}{{$k}}:{{$v}} {{ end }}{{ end }}"

        is_local() {
          echo ",$CUSTOM_LOCAL_COMPONENTS," | grep -q ",$1,"
        }

        get_component_version() {
          short="$1"
          component="$2"
          chart="$3"
          env_var="$4"

          # 1. Fixed override?
          for pair in $FIXED_VERSION_PAIRS; do
            name="${pair%%:*}"
            ver="${pair#*:}"
            if [ "$short" = "$name" ] && [ -n "$ver" ] && [ "$ver" != "$name" ]; then
              echo "Using FIXED override version for $short -> $ver"
              export "$env_var"="$ver"
              ./bin/ocm transfer componentversion --copy-resources --no-update ghcr.io/platform-mesh//$component:$ver https://oci-registry-docker-registry.registry.svc.cluster.local:9443/platform-mesh
              return 0
            fi
          done

          # 2. Local chart?
          if is_local "$short" && [ -n "$chart" ] && [ -f "$chart/Chart.yaml" ]; then
            val=$(grep '^version:' "$chart/Chart.yaml" | sed 's/^version: //')
            echo "Using LOCAL chart version for $short -> $val"
          else
            # 3. Remote latest
            val=$(./bin/ocm get componentversions --latest "$component" --repo ghcr.io/platform-mesh -o json | jq -r '.items[0].component.version')
            echo "Using REMOTE component version for $short -> $val"
            ./bin/ocm transfer componentversion --copy-resources --no-update ghcr.io/platform-mesh//$component:$val oci://oci-registry-docker-registry.registry.svc.cluster.local:9443/platform-mesh
            ./bin/ocm transfer componentversion --copy-resources --no-update ghcr.io/platform-mesh//$component:$val .ocm/transport.ctf
          fi
          export "$env_var"="$val"
        }

        # Retrieve versions (add chart path only for those that can be local)
        get_component_version iam-service github.com/platform-mesh/iam-service ../helm-charts-priv/charts/iam-service IAM_SERVICE_VERSION
        get_component_version iam-ui github.com/platform-mesh/iam-ui ../helm-charts-priv/charts/iam-ui IAM_UI_VERSION
        get_component_version marketplace-ui github.com/platform-mesh/marketplace-ui ../helm-charts-priv/charts/marketplace-ui MARKETPLACE_UI_VERSION
        # Add more mappings as needed

        echo "--- getting component versions ---"
        PLATFORMMESH_PRIVATE_VERSION={{ .COMPONENT_VERSION }}

        ocm_ctf=.ocm/transport.ctf
        mkdir -p "$(dirname "$ocm_ctf")"

        env | grep _VERSION | sort

        set -x
        kubectl exec -it ocm-transfer-pod -- ocm add components --lookup 'oci-registry-docker-registry.registry.svc.cluster.local' -c --templater=go --file ".ocm/transport.ctf" .ocm/component-constructor-platform-mesh-priv.yaml -- \
        VERSION=$PLATFORMMESH_PRIVATE_VERSION \
        IAM_SERVICE_VERSION=$IAM_SERVICE_VERSION \
        IAM_UI_VERSION=$IAM_UI_VERSION \
        MARKETPLACE_UI_VERSION=$MARKETPLACE_UI_VERSION

        echo
        echo "Built private component version $COMPONENT_VERSION (local overrides: $CUSTOM_LOCAL_COMPONENTS)"

      - task: ocm:patch:component
        vars: { COMPONENT_VERSION_NAME: 'platform-mesh-priv', COMPONENT_VERSION_NAMESPACE: 'default' }
      - task: ocm:configure:tls
      - task: ocm:transfer:dir-to-local-oci

  ocm:deploy:transfer-pod:
    cmds:
      - |
        set -e
        echo "Transferring OCM transport archive to local registry from a pod..."
        kubectl run ocm-transfer-pod --image=ghcr.io/akafazov/devbox:latest -- sleep infinity || true
        kubectl wait --namespace default --for=condition=Ready pod --timeout=480s ocm-transfer-pod

        kubectl exec -ti ocm-transfer-pod -- mkdir -p .ocm/transport.ctf

        # configure RootCA truststore on the pod
        kubectl exec -ti ocm-transfer-pod -- openssl s_client -connect oci-registry-docker-registry.registry.svc.cluster.local:443 -showcerts </dev/null 2>/dev/null| openssl x509 -outform PEM > registry-ca.pem
        kubectl cp registry-ca.pem -n default ocm-transfer-pod:registry-ca.pem
        kubectl exec -ti ocm-transfer-pod -- sudo cp registry-ca.pem /usr/local/share/ca-certificates/local-oci-registry_root_ca.crt
        kubectl exec -ti ocm-transfer-pod -- sudo update-ca-certificates

      - |
        cat <<EOF > .ocm/.ocmconfig
        type: generic.config.ocm.software/v1
        configurations:
          - type: credentials.config.ocm.software
            consumers:
              - identity:
                  type: OCIRegistry
                  scheme: https
                  hostname: ghcr.io
                  pathprefix: platform-mesh
                credentials:
                  - type: Credentials
                    properties:
                      username: github
                      password: $GH_TOKEN
        EOF
        kubectl cp .ocm/.ocmconfig -n default ocm-transfer-pod:.
              

  ocm:transfer:dir-to-local-oci:
    deps:
      - task: ocm:registry:port-forward
    cmds:
      - |
        kubectl exec -it ocm-transfer-pod -- ocm transfer ctf --overwrite .ocm/transport.ctf oci://oci-registry-docker-registry.registry.svc.cluster.local/platform-mesh

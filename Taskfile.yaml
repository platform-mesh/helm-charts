version: '3'

vars:
  LOCAL_BIN: bin
  CHARTS:
    sh: "printf '%s' $(ls -d charts/*/ | paste -sd ',' -)"
  CHANGED_CHARTS:
    sh: "git status --porcelain | grep '^ M charts/' | cut -d'/' -f2 | sort -u | sed 's|^|charts/|' | paste -sd ',' -"
  PACKAGED_CHARTS:
    sh: "ls oci/ | sed 's/^/oci\\//g' | paste -sd ',' -"
  GOOS:
    sh: go env GOOS
  GOARCH:
    sh: go env GOARCH
  OCM_VERSION: 0.29.0
  COMPONENT_PRERELEASE_VERSION: "1.0.0"
  CUSTOM_LOCAL_COMPONENTS_CHART_PATHS:
    - account-operator: charts/account-operator
    - security-operator: charts/security-operator
    - extension-manager-operator: charts/extension-manager-operator
    - infra: charts/infra
    - rebac-authz-webhook: charts/rebac-authz-webhook
    - platform-mesh: charts/platform-mesh-operator
    - portal: charts/portal
    - platform-mesh-operator: charts/platform-mesh-operator
    - kubernetes-graphql-gateway: charts/kubernetes-graphql-gateway
    - virtual-workspaces: charts/virtual-workspaces
    - platform-mesh-operator-components: charts/platform-mesh-operator-components
  COMPONENT_VERSION_FIX_DEPEDENCY_VERSIONS: []
    # - keycloak: 24.8.1

tasks:
  ## Setup
  setup:kube-lint:
    internal: true
    cmds:
      - mkdir -p $(pwd)/{{.LOCAL_BIN}}
      - test -s {{.LOCAL_BIN}}/kube-linter || GOBIN=$(pwd)/{{.LOCAL_BIN}} go install golang.stackrox.io/kube-linter/cmd/kube-linter@latest
      - chmod +x $(pwd)/{{.LOCAL_BIN}}/kube-linter
  setup:helm-docs:
    internal: true
    cmds:
      - test -s {{.LOCAL_BIN}}/helm-docs || GOBIN=$(pwd)/{{.LOCAL_BIN}} go install github.com/norwoodj/helm-docs/cmd/helm-docs@v1.14.2
  setup:mkcert:
    internal: true
    cmds:
      - test -s {{.LOCAL_BIN}}/mkcert || GOBIN=$(pwd)/{{.LOCAL_BIN}} go install filippo.io/mkcert@latest
      - export PATH=$(pwd)/{{.LOCAL_BIN}}:$PATH
  setup:ocm:
    internal: true
    deps: 
      -  task: setup:mkbin
    cmds:
      - test -s {{.LOCAL_BIN}}/ocm || (curl -o {{.LOCAL_BIN}}/ocm.tar.gz -sSL https://github.com/open-component-model/ocm/releases/download/v{{ .OCM_VERSION }}/ocm-{{ .OCM_VERSION }}-{{ .GOOS }}-{{ .GOARCH }}.tar.gz && tar -xzf {{ .LOCAL_BIN }}/ocm.tar.gz -C {{ .LOCAL_BIN }} && rm {{ .LOCAL_BIN}}/ocm.tar.gz && chmod +x {{.LOCAL_BIN}}/ocm && chmod 755 {{.LOCAL_BIN}}/ocm)
  setup:mkbin:
    internal: true
    cmds:
      - mkdir -p $(pwd)/{{.LOCAL_BIN}}


  ## Development
  lint:
    deps: []
    cmds:
      - "ct lint --target-branch main --chart-dirs=charts --validate-maintainers=false --chart-repos=bitnami=https://charts.bitnami.com/bitnami,openfga=https://openfga.github.io/helm-charts"
  helmtest:
    cmds:
      - "for chart in $(echo {{.CHARTS}} | tr ',' ' '); do helm unittest $chart; done"
  helmtest-update:
    cmds:
      - "for chart in $(echo {{.CHARTS}} | tr ',' ' '); do helm unittest -u $chart; done"
  test:
    deps:
      - task: helmtest
  update-changed:
    deps:
      - task: docs
    cmds:
      - "for chart in $(echo {{.CHANGED_CHARTS}} | tr ',' ' '); do helm dependency update $chart && helm unittest -u $chart; done"
  update:
    deps:
      - task: docs
    cmds:
      - "for chart in $(echo {{.CHARTS}} | tr ',' ' '); do helm dependency update $chart; done"
  validate:
    cmds:
      - task: test
      - task: docs
      - task: update
      - task: lint
      - task: oci
  vulnerability:
    deps:
      - task: setup:kube-lint
    cmds:
      - "{{.LOCAL_BIN}}/kube-linter lint \"charts/\" --format \"plain\""
  docs:
    deps:
      - task: setup:helm-docs
    cmds:
      - "for chart in $(echo {{.CHARTS}} | tr ',' ' '); do {{.LOCAL_BIN}}/helm-docs --log-level=debug --chart-search-root $chart --template-files=../../docs-templates/header.md.gotmpl,README.md.gotmpl,../../docs-templates/footer.md.gotmpl --skip-version-footer=false; done"
  oci:
    cmds:
      - "rm oci/* || true"
      - task: helmpackage
  local-setup:iterate:
    deps:
      - task: setup:mkcert
    cmds:
      - ./local-setup/scripts/start.sh
  local-setup:
    deps:
      - task: setup:mkcert
    cmds:
      - |
        read -r -p "Are you sure you want to delete the cluster? [y/N] " response && if [ "$response" != "y" ]; then echo "Aborted."; exit 1; fi
        kind delete cluster --name platform-mesh
        ./local-setup/scripts/start.sh

  local-setup-minimal:
    deps:
      - task: setup:mkcert
    cmds:
      - |
        read -r -p "Are you sure you want to delete the cluster? [y/N] " response && if [ "$response" != "y" ]; then echo "Aborted."; exit 1; fi
        kind delete cluster --name platform-mesh
        ./local-setup/scripts/start.sh --minimal
  local-setup-minimal:iterate:
    deps:
      - task: setup:mkcert
    cmds:
      - |
        ./local-setup/scripts/start.sh --minimal

  local-setup-cached:
    deps:
      - task: setup:mkcert
    cmds:
      - read -r -p "Are you sure you want to delete the cluster? [y/N] " response && if [ "$response" != "y" ]; then echo "Aborted."; exit 1; fi
      - kind delete cluster --name platform-mesh
      - ./local-setup/scripts/start.sh --cached

  local-setup-cached:iterate:
    cmds:
      - ./local-setup/scripts/start.sh --cached

  local-setup-start-docker-registries:
    cmds:
      - docker run -d --name proxy-quay --restart=always --net=kind -e REGISTRY_PROXY_REMOTEURL=https://quay.io registry:2
      - docker run -d --name proxy-ghcr --restart=always --net=kind -e REGISTRY_PROXY_REMOTEURL=https://ghcr.io registry:2
      - docker run -d --name proxy-k8s-io --restart=always --net=kind -e REGISTRY_PROXY_REMOTEURL=https://registry.k8s.io registry:2

  ocm:deploy:ociregistry:
    internal: true
    cmds:
      - |
        kind export kubeconfig -n platform-mesh
        # docs: https://github.com/twuni/docker-registry.helm
        helm repo add twuni https://helm.twun.io
        helm repo update
        kubectl create ns registry || true
        helm upgrade --install oci-registry twuni/docker-registry -n registry --set service.port=443 --set tlsSecretName=domain-certificate --set image.repository=ghcr.io/distribution/distribution --set image.tag=3.0.0 --set ingress.enabled=false

        kubectl create secret generic domain-certificate -n registry \
          --from-file=tls.crt=./local-setup/scripts/certs/cert.crt \
          --from-file=tls.key=./local-setup/scripts/certs/cert.key \
          --from-file=ca.crt=./local-setup/scripts/certs/ca.crt \
          --type=kubernetes.io/tls --dry-run=client -oyaml | kubectl apply -f -
        
        kubectl wait --namespace registry \
          --for=condition=available deployment \
          --timeout=120s oci-registry-docker-registry

  ocm:build:custom-local-charts:
    deps:
      - task: setup:ocm
    cmds:
      - kind export kubeconfig -n platform-mesh
      - kubectl cp .ocm/component-constructor.yaml -n default ocm-transfer-pod:.ocm/component-constructor.yaml
      - kubectl cp .ocm/component-constructor-chart-only.yaml -n default ocm-transfer-pod:.ocm/component-constructor-chart-only.yaml
      - |
        set -e
        echo "Building custom local charts from {{ .CUSTOM_LOCAL_COMPONENTS_CHART_PATHS }}"

        # Iterate key:path pairs rendered from the mapping list
        for pair in {{ range .CUSTOM_LOCAL_COMPONENTS_CHART_PATHS }}"{{ range $k,$v := . }}{{$k}}:{{$v}}{{ end }}" {{ end }}; do
          comp="${pair%%:*}"
          COMPONENT=$comp
          CHART_DIR="${pair#*:}"
          echo "Processing $CHART_DIR"
          comp="$(echo "$comp" | xargs)"
          
          # Try to get the value of $comp from .ocm/component-constructor-prerelease.yaml componentReferences
          COMPONENT_NAME=$(yq -r ".components[] | select(.name == \"github.com/platform-mesh/prerelease\") | .componentReferences[] | select(.name == \"$comp\") | .componentName" .ocm/component-constructor-prerelease.yaml 2>/dev/null || true)
          echo "COMPONENT_NAME from component-constructor-prerelease.yaml: '$COMPONENT_NAME'"

          CHART_DIR="$(echo "$CHART_DIR" | xargs)"
          [ -z "$COMPONENT_NAME" ] && continue

          echo "Component: $COMPONENT_NAME (chart dir: $CHART_DIR)"

          CHART_VERSION=$(grep '^version:' "$CHART_DIR/Chart.yaml" | sed 's/^version: //')
            : "${CHART_VERSION:?Failed to read version for $COMPONENT_NAME}"
          APP_VERSION=$(yq -r '.appVersion // ""' "$CHART_DIR/Chart.yaml" 2>/dev/null || true)

          out="$(helm package "$CHART_DIR")"
          TARBALL="$(echo "$out" | awk -F': ' '/saved it to:/ {print $2}')"
          if [ ! -f "$TARBALL" ]; then
            echo "Failed to package $COMPONENT_NAME"
            exit 1
          fi

          echo "Pushing $TARBALL to local oci registry..."
          kubectl cp $TARBALL -n default ocm-transfer-pod:.
          kubectl exec -ti ocm-transfer-pod -- helm push $(basename $TARBALL) oci://oci-registry-docker-registry.registry.svc.cluster.local/platform-mesh
          echo "Pushed $TARBALL to local oci registry"

          IMAGE_NAME=$(yq '.image["name"] // ""' "$CHART_DIR/values.yaml")
          COMPONENT_NAME="$COMPONENT_NAME"
          CHART_REPO="$COMPONENT_NAME"
          CLEAN_CHART_REPO="${CHART_REPO#./}"
          LOCAL_CHART_PATH="$CLEAN_CHART_REPO"
          COMMIT=$(git rev-parse HEAD)
          LOCAL_CHART_PATH=../$CHART_DIR
          CHART_OCI_PATH=oci://oci-registry-docker-registry.registry.svc.cluster.local/platform-mesh/$COMPONENT
          VERSION=$CHART_VERSION

          echo ""
          echo "VERSION=$VERSION"
          echo "APP_VERSION=$APP_VERSION"
          echo "IMAGE_NAME=$IMAGE_NAME"
          echo "COMMIT=$COMMIT"
          echo "IMAGE_REPO_SHA=$IMAGE_REPO_SHA"
          echo "CHART_REPO=$CHART_REPO"
          echo "COMPONENT_NAME=$COMPONENT_NAME"
          echo "CHART_OCI_PATH=$CHART_OCI_PATH"
          echo "LOCAL_CHART_PATH=$LOCAL_CHART_PATH"
          echo ""

          set -x
          echo "Adding component: $COMPONENT_NAME version $VERSION"
          CHART_REAL_NAME=$(grep '^name:' "$CHART_DIR/Chart.yaml" | awk '{print $2}')
          CHART_LOCATION="oci://oci-registry-docker-registry.registry.svc.cluster.local:9443/platform-mesh/${CHART_REAL_NAME}:$CHART_VERSION"

          if [ $APP_VERSION == "0.0.0" ]; then
            echo "Using ocm-constructor-file: .ocm/component-constructor-chart-only.yaml"
            kubectl exec -ti ocm-transfer-pod -- ocm add components -c --templater=go --file ".ocm/transport.ctf" .ocm/component-constructor-chart-only.yaml -- \
            VERSION=$VERSION \
            APP_VERSION=$APP_VERSION \
            IMAGE_NAME=$IMAGE_NAME \
            COMMIT=$COMMIT \
            IMAGE_REPO_SHA=$COMMIT \
            CHART_REPO=$CHART_REPO \
            COMPONENT_NAME=$COMPONENT_NAME \
            CHART_OCI_PATH=$CHART_OCI_PATH \
            LOCAL_CHART_PATH=$LOCAL_CHART_PATH
          else
            kubectl exec -ti ocm-transfer-pod -- ocm add components -c --templater=go --file ".ocm/transport.ctf" .ocm/component-constructor.yaml -- \
            VERSION=$VERSION \
            APP_VERSION=$APP_VERSION \
            IMAGE_NAME=$IMAGE_NAME \
            COMMIT=$COMMIT \
            IMAGE_REPO_SHA=$COMMIT \
            CHART_REPO=$CHART_REPO \
            COMPONENT_NAME=$COMPONENT_NAME \
            CHART_OCI_PATH=$CHART_OCI_PATH \
            LOCAL_CHART_PATH=$LOCAL_CHART_PATH
          fi

          echo "Done: $COMPONENT_NAME"
          echo
        done

        echo "Completed building custom local charts."
      - task: ocm:transfer:dir-to-local-oci

  ocm:configure:tls:
    internal: true
    desc: Apply ocm-k8s-toolkit patch to support oci registry with self-signed certs
    cmds:
      - local-setup/scripts/configureOcmTls.sh

  ocm:build:component:
    aliases:
      - ocm:build
    deps: 
      - task: ocm:build:custom-local-charts
      - task: ocm:update:constructor
    cmds:
      - kind export kubeconfig -n platform-mesh
      - kubectl cp .ocm/component-constructor-prerelease.yaml -n default ocm-transfer-pod:.ocm/component-constructor-prerelease.yaml
      - |
        # set -x
        # Build comma-separated list of local component names from CUSTOM_LOCAL_COMPONENTS_CHART_PATHS
        CUSTOM_LOCAL_COMPONENTS="$(printf '%s' "{{ range .CUSTOM_LOCAL_COMPONENTS_CHART_PATHS }}{{ range $k,$v := . }}{{$k}},{{ end }}{{ end }}" | sed 's/,$//')"

        # Build space-separated key:version pairs from COMPONENT_VERSION_FIX_DEPEDENCY_VERSIONS
        FIXED_VERSION_PAIRS="{{ range .COMPONENT_VERSION_FIX_DEPEDENCY_VERSIONS }}{{ range $k,$v := . }}{{$k}}:{{$v}} {{ end }}{{ end }}"

        is_local() {
          echo ",$CUSTOM_LOCAL_COMPONENTS," | grep -q ",$1,"
        }

        get_component_version() {
          short="$1"
          component="$2"
          chartDir="$3"
          env_var="$4"

          # 1. Fixed override?
          for pair in $FIXED_VERSION_PAIRS; do
            name="${pair%%:*}"
            ver="${pair#*:}"
            if [ "$short" = "$name" ] && [ -n "$ver" ] && [ "$ver" != "$name" ]; then
              echo "Using FIXED override version for $short -> $ver"
              export "$env_var"="$ver"
              kubectl exec -ti ocm-transfer-pod -- ocm transfer componentversion --copy-resources --no-update ghcr.io/platform-mesh//$component:$ver https://oci-registry-docker-registry.registry.svc.cluster.local/platform-mesh
              return 0
            fi
          done

          # 2. Local chartDir?
          if is_local "$short" && [ -n "$chartDir" ] && [ -f "$chartDir/Chart.yaml" ]; then
            val=$(grep '^version:' "$chartDir/Chart.yaml" | sed 's/^version: //')
            echo "Using LOCAL chartDir version for $short -> $val"
          else
            # 3. Remote latest
            repo="ghcr.io/platform-mesh"
            val=$(kubectl exec -ti ocm-transfer-pod -- ocm get componentversions --latest "$component" --repo "$repo" -o json 2>/dev/null | jq -r '.items[0].component.version' 2>/dev/null || true)
            if [ -z "$val" ] || [ "$val" = "null" ]; then
              repo="ghcr.io/platform-mesh/images"
              echo "Primary repo lookup failed for $component, trying fallback repo $repo"
              val=$(kubectl exec -ti ocm-transfer-pod -- ocm get componentversions --latest "$component" --repo "$repo" -o json 2>/dev/null | jq -r '.items[0].component.version' 2>/dev/null || true)
            fi
            if [ -z "$val" ] || [ "$val" = "null" ]; then
              echo "Failed to resolve remote version for $component" >&2
              exit 1
            fi
            echo "Using REMOTE component version for $short -> $val"
            kubectl exec -ti ocm-transfer-pod -- ocm transfer componentversion --copy-resources --overwrite $repo//$component:$val .ocm/transport.ctf
          fi
          export "$env_var"="$val"
        }

        # Retrieve versions (add chart path only for those that can be local)
        get_component_version account-operator github.com/platform-mesh/account-operator charts/account-operator ACCOUNT_OPERATOR_VERSION
        get_component_version security-operator github.com/platform-mesh/security-operator charts/security-operator SECURITY_OPERATOR_VERSION
        get_component_version extension-manager-operator github.com/platform-mesh/extension-manager-operator charts/extension-manager-operator EXTENSION_MANAGER_OPERATOR_VERSION
        get_component_version infra github.com/platform-mesh/infra charts/infra INFRA_VERSION
        get_component_version rebac-authz-webhook github.com/platform-mesh/rebac-authz-webhook charts/rebac-authz-webhook REBAC_AUTHZ_WEBHOOK_VERSION
        get_component_version portal github.com/platform-mesh/portal ../helm-charts/charts/portal/ PORTAL_VERSION
        get_component_version platform-mesh-operator github.com/platform-mesh/platform-mesh-operator charts/platform-mesh-operator/ PLATFORM_MESH_OPERATOR_VERSION
        get_component_version kubernetes-graphql-gateway github.com/platform-mesh/kubernetes-graphql-gateway charts/kubernetes-graphql-gateway KUBERNETES_GRAPHQL_GATEWAY_VERSION
        get_component_version virtual-workspaces github.com/platform-mesh/virtual-workspaces charts/virtual-workspaces VIRTUAL_WORKSPACES_VERSION
        get_component_version keycloak github.com/platform-mesh/keycloak ../helm-charts/keycloak/ KEYCLOAK_VERSION
        get_component_version platform-mesh-operator-components github.com/platform-mesh/platform-mesh-operator-components charts/platform-mesh-operator-components PLATFORM_MESH_OPERATOR_COMPONENTS_VERSION

        export CROSSPLANE_VERSION=$(ocm get resources oci://ghcr.io/platform-mesh//github.com/crossplane/crossplane --latest -o json|jq '.items[0].element["version"]' -r)
        export ISTIO_VERSION=$(ocm get resources oci://ghcr.io/platform-mesh//github.com/istio/istio/base --latest -o json|jq '.items[0].element["version"]' -r)
        export OPENFGA_VERSION=$(ocm get resources oci://ghcr.io/platform-mesh//github.com/openfga/openfga --latest -o json|jq '.items[0].element["version"]' -r)
        export KCP_OPERATOR_VERSION=$(ocm get resources oci://ghcr.io/platform-mesh//github.com/kcp-dev/kcp-operator --latest -o json|jq '.items[0].element["version"]' -r)
        export KCP_IMAGE_VERSION=$(ocm get resources oci://ghcr.io/platform-mesh//github.com/kcp-dev/kcp-operator --latest -o json | jq -r '.items[] | select(.element.type == "ociImage") | .element.version' | sed 's/^0\.0\.0-//')
        export GARDENER_ETCD_DRUID_SOURCE_REF=$(ocm get resources oci://ghcr.io/platform-mesh//github.com/gardener/etcd-druid --latest -o json| jq -r '.items[] | select(.element.type == "ociImage") | .element.version')
        export GARDENER_ETCD_DRUID_CHART_VERSION=$(ocm get resources oci://ghcr.io/platform-mesh//github.com/gardener/etcd-druid --latest -o json| jq -r '.items[] | select(.element.type == "helmChart") | .element.version')
        
        # Add more mappings as needed

        echo "--- finished getting component versions ---"

        set -x
        kubectl exec -it ocm-transfer-pod -- ocm add components --lookup 'oci-registry-docker-registry.registry.svc.cluster.local' -c --templater=go --file ".ocm/transport.ctf" .ocm/component-constructor-prerelease.yaml -- \
        VERSION={{ .COMPONENT_PRERELEASE_VERSION }} \
        ISTIO_VERSION=$ISTIO_VERSION \
        CROSSPLANE_VERSION=$CROSSPLANE_VERSION \
        OPENFGA_VERSION=$OPENFGA_VERSION \
        KCP_OPERATOR_VERSION=$KCP_OPERATOR_VERSION \
        KCP_IMAGE_VERSION=$KCP_IMAGE_VERSION \
        GARDENER_ETCD_DRUID_SOURCE_REF=$GARDENER_ETCD_DRUID_SOURCE_REF \
        GARDENER_ETCD_DRUID_CHART_VERSION=$GARDENER_ETCD_DRUID_CHART_VERSION \
        ACCOUNT_OPERATOR_VERSION=$ACCOUNT_OPERATOR_VERSION \
        PLATFORM_MESH_OPERATOR_VERSION=$PLATFORM_MESH_OPERATOR_VERSION \
        EXTENSION_MANAGER_OPERATOR_VERSION=$EXTENSION_MANAGER_OPERATOR_VERSION \
        SECURITY_OPERATOR_VERSION=$SECURITY_OPERATOR_VERSION \
        REBAC_AUTHZ_WEBHOOK_VERSION=$REBAC_AUTHZ_WEBHOOK_VERSION \
        INFRA_VERSION=$INFRA_VERSION \
        KUBERNETES_GRAPHQL_GATEWAY_VERSION=$KUBERNETES_GRAPHQL_GATEWAY_VERSION \
        PORTAL_VERSION=$PORTAL_VERSION \
        KEYCLOAK_VERSION=$KEYCLOAK_VERSION \
        VIRTUAL_WORKSPACES_VERSION=$VIRTUAL_WORKSPACES_VERSION \
        PLATFORM_MESH_OPERATOR_COMPONENTS_VERSION=$PLATFORM_MESH_OPERATOR_COMPONENTS_VERSION

        echo
        echo "Built prerelease component version {{ .COMPONENT_PRERELEASE_VERSION }} (local overrides: $CUSTOM_LOCAL_COMPONENTS)"

      - task: ocm:transfer:dir-to-local-oci

  ocm:deploy:transfer-pod:
    internal: true
    cmds:
      - |
        set -e
        echo "Transferring OCM transport archive to local registry from a pod..."
        kubectl delete pod ocm-transfer-pod --ignore-not-found=true || true
        kubectl run ocm-transfer-pod --image=ghcr.io/platform-mesh/images/ocmbuilder:pr-4 -- sleep infinity || true
        kubectl wait --namespace default --for=condition=Ready pod --timeout=480s ocm-transfer-pod
        kubectl exec -ti ocm-transfer-pod -- mkdir -p .ocm
        
        # configure RootCA truststore on the pod
        kubectl exec -ti ocm-transfer-pod -- openssl s_client -connect oci-registry-docker-registry.registry.svc.cluster.local:443 -showcerts </dev/null 2>/dev/null| openssl x509 -outform PEM > registry-ca.pem
        kubectl cp registry-ca.pem -n default ocm-transfer-pod:registry-ca.pem
        kubectl exec -ti ocm-transfer-pod -- sudo cp registry-ca.pem /usr/local/share/ca-certificates/local-oci-registry_root_ca.crt
        kubectl exec -ti ocm-transfer-pod -- sudo update-ca-certificates

  ocm:transfer:dir-to-local-oci:
    cmds:
      - cmd: kubectl exec -it ocm-transfer-pod -- ocm transfer ctf --overwrite .ocm/transport.ctf oci://oci-registry-docker-registry.registry.svc.cluster.local/platform-mesh
        ignore_error: true

  ocm:deploy:
    cmds:
      - task: ocm:deploy:ociregistry
      - task: ocm:deploy:transfer-pod
      - task: ocm:configure:tls

  ocm:kustomize:apply:
    aliases:
      - ocm:apply
    cmds:
      - kind export kubeconfig -n platform-mesh
      - |
        echo "Applying kustomize overlay to deploy platform-mesh, semver: {{ .COMPONENT_PRERELEASE_VERSION }}"
        yq -i '.spec.semver = "{{ .COMPONENT_PRERELEASE_VERSION }}"' local-setup/kustomize/overlays/ocm-prerelease/prerelease-component.yml

      - | # apply kustomize patch only for configured charts in CUSTOM_LOCAL_COMPONENTS_CHART_PATHS
        patch_string=""
        for pair in {{ range .CUSTOM_LOCAL_COMPONENTS_CHART_PATHS }}"{{ range $k,$v := . }}{{$k}}:{{$v}}{{ end }}" {{ end }}; do
          comp="${pair%%:*}"
          patch_string+=$(cat <<EOF
        - op: add
          path: /spec/values/$comp
          value: {}
        - op: add
          path: /spec/values/$comp/ocm
          value: {}
        - op: add
          path: /spec/values/$comp/ocm/repo
          value: {}
        - op: add
          path: /spec/values/$comp/ocm/repo/name
          value: prerelease
        - op: add
          path: /spec/values/$comp/ocm/component
          value: {}
        - op: add
          path: /spec/values/$comp/ocm/component/name
          value: prerelease
        EOF
          )
          patch_string+=$'\n'
        done

        # Use yq to update the kustomization.yaml file
        yq -i '.patches[0].patch = "'"$patch_string"'"' local-setup/kustomize/overlays/ocm-prerelease/kustomization.yaml

      - |
        kubectl apply -k local-setup/kustomize/overlays/ocm-prerelease
        echo "Applied kustomize overlay"
      - kubectl rollout restart deployment/ocm-k8s-toolkit-controller-manager -n ocm-system

  ocm:cleanup:
    cmds:
      - kind export kubeconfig -n platform-mesh
      - |
        rm registry-ca.pem
      - cmd: kubectl delete pod ocm-transfer-pod --ignore-not-found=true

  bump-local-setup-component-version:
    cmds:
      - |
        LATEST_VERSION=$(ocm get componentversions --repo ghcr.io/platform-mesh github.com/platform-mesh/platform-mesh --latest -ojson | jq -r '.items[0].component.version')
        yq -i '.spec.semver = "'$LATEST_VERSION'"' local-setup/kustomize/components/ocm-component/component.yaml

  ocm:build-apply:iterate:
    cmds:
      - task: ocm:build:component
      - task: ocm:kustomize:apply
  
  ocm:update:constructor:
    cmds:
      - |
        curl -o .ocm/component-constructor-prerelease.yaml https://raw.githubusercontent.com/platform-mesh/ocm/refs/heads/main/constructor/component-constructor.yaml -H "Authorization: token $GH_TOKEN"
        
        # replace component name
        sed -i "s|- name: github.com/platform-mesh/platform-mesh|- name: github.com/platform-mesh/prerelease|" .ocm/component-constructor-prerelease.yaml
        
        # remove private 'example-httpbin-operator' component
        sed -i '/      - name: example-httpbin-operator/{N;N;d;}' .ocm/component-constructor-prerelease.yaml        

  test:portal-e2e:
    cmds:
      - |
          pushd local-setup/e2e
          npm install
          npm ci
          npx playwright install
          npx playwright test
          popd

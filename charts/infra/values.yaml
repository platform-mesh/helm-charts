
hostAliases:
  enabled: false
  entries:
    - ip: "10.96.188.4"
      hostnames:
        - "kcp.api.portal.dev.local"
kcp:
  namespace: platform-mesh-system
  external:
    hostname: kcp.api.portal.dev.local
    port: 8443
  auth:
    adminCert:
      enabled: true
      privateKey:
        algorithm: RSA
        size: 2048
      subject:
        organizations:
          - system:kcp:admin
  etcd:
    name: etcd-kcp
    service:
      name: etcd-kcp-client
      port: 2379
    defragmentationSchedule: "0 */24 * * *"
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 100m
        memory: 200Mi
    serverPort: 2380
    quota: 8Gi
    backup:
      port: 8080
      fullSnapshotSchedule: "0 */24 * * *"
      resources:
        limits:
          cpu: 200m
          memory: 1Gi
        requests:
          cpu: 23m
          memory: 128Mi
      garbageCollectionPolicy: Exponential
      garbageCollectionPeriod: 43200s
      deltaSnapshotPeriod: 300s
      deltaSnapshotMemoryLimit: 1Gi
      compression:
        enabled: false
        policy: "gzip"
      leaderElection:
        reelectionPeriod: 5s
        etcdConnectionTimeout: 5s
    sharedConfig:
      autoCompactionMode: periodic
      autoCompactionRetention: "30m"
    replicas: 1

  oidc:
    enabled: true
    issuerUrl: "https://portal.dev.local:8443/keycloak/realms/default"
    clientID: default
    groupsClaim: groups
    usernameClaim: email

  istio:
    hosts:
      - kcp.api.portal.dev.local

  webhook:
    enabled: false
    caData: ""
    server: https://rebac-authz-webhook.openmfp-system.svc.cluster.local:9443/authz
    authorizationWebhookSecretName: kcp-webhook-secret

  frontProxy:
    name: frontproxy
    clusterIP: ""
    port: 8443
    additionalPathMappings:
      - path: /services/contentconfigurations
        backend: https://virtual-workspaces.platform-mesh-system:8443
        backend_server_ca: /etc/kcp/tls/ca/tls.crt
        proxy_client_cert: /etc/kcp-front-proxy/requestheader-client/tls.crt
        proxy_client_key: /etc/kcp-front-proxy/requestheader-client/tls.key
      - path: /services/marketplace
        backend: https://virtual-workspaces.platform-mesh-system:8443
        backend_server_ca: /etc/kcp/tls/ca/tls.crt
        proxy_client_cert: /etc/kcp-front-proxy/requestheader-client/tls.crt
        proxy_client_key: /etc/kcp-front-proxy/requestheader-client/tls.key

openfga:
  rbac:
    requestPrincipals: [ ]
    writePrincipals:
      - cluster.local/ns/platform-mesh-system/sa/iam-service
      - cluster.local/ns/platform-mesh-system/sa/iam-service-dataloader-sa
      - cluster.local/ns/platform-mesh-system/sa/security-operator
      - cluster.local/ns/platform-mesh-system/sa/account-operator
  datastore:
    databaseService: openfga-openfga-postgres
    secret:
      create: false
      name: openfga-db
    auth:
      username: postgres
      password: postgres

keycloak:
  istio:
    virtualservice:
      # -- istio virtual service hosts
      hosts: [ "*" ]
    https:
      port: 8443
  # -- service configuration
  service:
    # -- service name
    name: keycloak
    # -- service port
    port: 80

  # -- domain configuration
  domain:
    # -- domain name
    name: platform-mesh.io
    # -- path prefix
    pathPrefix: "/keycloak"

istio:
  networking:
    # -- The istio apiVersion used for networking resources in this chart eg. networking.istio.io/v1, networking.istio.io/v1beta1
    apiVersion: networking.istio.io/v1
  serviceEntries:
    https:
      # -- A toggle to enable the service entries for external https communication
      enabled: false
      # -- The list of hosts to be added to the service entry
      hosts: []
  enabled: true
  main:
    gateway:
      hosts:
        - "*"
      port: 8000
      name: http
      protocol: HTTP
  #      tls:
  #        minProtocolVersion: TLSV1_2
  #        mode: SIMPLE
  #        credentialName: istio-ingressgateway-certs
  passThrough:
    gateway:
      enabled: false
  #      hosts:
  #        - "passthrough.my-domain.com"
  #      port: 8000
  #      name: pass-https
  #      protocol: HTTPS


  gateway:
    annotations: {}
    apiVersion: networking.istio.io/v1
    name: gateway
    selector:
      istio: gateway
apiVersion: core.platform-mesh.io/v1alpha1
kind: PlatformMesh
metadata:
  name: platform-mesh
  namespace: platform-mesh-system
spec:
  exposure:
    port: 8443
  # renovate: datasource=docker registryUrl=https://ghcr.io depName=ghcr.io/platform-mesh/helm-charts/platform-mesh-operator-components
  chartVersion: 0.15.29
  values:
    istio-gateway:
      enabled: true
      targetNamespace: istio-system
      values:
        service:
          type: None
    keycloak:
      enabled: true
      values:
        service:
          clusterIP: 10.96.0.110
    crossplane:
      values:
        provider:
          packages:
            - xpkg.upbound.io/crossplane-contrib/provider-keycloak:v1.9.2
    infra:
      values:
        hostAliases:
          enabled: true
        kcp:
          webhook:
            enabled: true
          frontProxy:
            clusterIP: "10.96.0.100"
        keycloak:
          crossplane:
            clients:
              default:
                validRedirectUris:
                  - "http://localhost:8000/callback*"
                  - "http://localhost:4300/callback*"
                  - "https://*"
    observability:
      enabled: false
    kcp-operator:
      enabled: true
      values:
        crds:
          create: false
        image:
          repository: ghcr.io/kcp-dev/kcp-operator
          #TODO this is needed until the latest changes are released like https://github.com/kcp-dev/kcp-operator/pull/89 and https://github.com/kcp-dev/kcp-operator/pull/88
          tag: "main"
          pullPolicy: IfNotPresent
    marketplace-ui:
      enabled: false
      values:
        istio:
          virtualService:
            hosts:
              - "portal.dev.local"
    iam-ui:
      enabled: false
      values:
        istio:
          virtualService:
            hosts:
              - "portal.dev.local"
    iam-service:
      enabled: false
    security-operator:
      values:
        hostAliases:
          enabled: true
          items:
            - ip: 10.96.0.100
              hostnames:
                - kcp.api.portal.dev.local
    portal:
      enabled: true
      values:
        extraEnvVars:
          - name: OPENMFP_PORTAL_CONTEXT_CRD_GATEWAY_API_URL
            value: "https://${org-subdomain}portal.dev.local:8443/api/kubernetes-graphql-gateway/root:orgs:${org-name}/graphql"
          - name: OPENMFP_PORTAL_CONTEXT_IAM_SERVICE_API_URL
            value: "https://portal.dev.local:8443/iam/query"
          - name: OPENMFP_PORTAL_CONTEXT_IAM_ENTITY_CONFIG
            value: '{"account":{"contextProperty":"entityId"}}'
          - name: NODE_EXTRA_CA_CERTS
            value: /etc/ssl/certs/domain-ca.crt
        extraVolumes:
          - name: domain-ca
            secret:
              secretName: domain-certificate-ca
        extraVolumeMounts:
          - name: domain-ca
            mountPath: /etc/ssl/certs/domain-ca.crt
            subPath: tls.crt
            readOnly: true
        deployment:
          hostAliases:
            - ip: "10.96.188.4"
              hostnames:
                - "portal.dev.local"
        virtualService:
          hosts:
            - "portal.dev.local"
            - "*.portal.dev.local"
        trust:
          default:
            tokenUrl: https://portal.dev.local:8443/keycloak/realms/default/protocol/openid-connect/token
            #     # -- base domains
            #     baseDomains: "portal.dev.local"
            #     # -- discovery endpoint. If specified (different than ""), authDomain and tokenUrl are not required
            #     #  discoveryEndpoint: ""
            #     # -- auth domain (if discoveryEndpoint is not specified)
            #     authDomain: http://localhost:8000/keycloak/realms/platform-mesh/protocol/openid-connect/auth
            #     # -- token url (if discoveryEndpoint is not specified)
            #     tokenUrl: http://keycloak/keycloak/realms/platform-mesh/protocol/openid-connect/token
            #     # -- oidc client secret name
            #     oidcClientSecretName: openmfp-client
            #     # -- login audience
            #     loginAudience: platform-mesh
            #     # -- secret key reference
            #     secretKeyRef: attribute.client_secret
            #     # -- ContentConfiguration validator api url
            #     contentConfigurationValidatorApiUrl: http://extension-manager-operator-server.platform-mesh-system.svc.cluster.local:8088/validate
    openfga:
      enabled: true
      values:
        datastore:
          uri: "postgres://postgres:password@openfga-postgres.platform-mesh-system.svc.cluster.local:5432/postgres?sslmode=disable"
        postgresql:
          image:
            registry: ghcr.io/platform-mesh
            repository: images/postgresql
            tag: 17.4.0-debian-12-r17
          auth:
            postgresPassword: password
            database: postgres
        telemetry:
          trace:
            enabled: true
            otlp:
              endpoint: observability-opentelemetry-collector.observability.svc.cluster.local:4317
              tls:
                enabled: false
    virtual-workspaces:
      values:
        virtualWorkspaceSecretName: virtual-workspaces-cert
        deployment:
          serverUrl: "https://frontproxy-front-proxy.platform-mesh-system:6443"
          resourceSchemaName: "v250704-6d57f16.contentconfigurations.ui.platform-mesh.io"
          resourceSchemaWorkspace: "root:platform-mesh-system"
    kubernetes-graphql-gateway:
      enabled: true
      values:
        listener:
          virtualWorkspacesConfig:
            content:
              virtualWorkspaces:
                - kubeconfig: /app/kubeconfig/kubeconfig
                  name: contentconfigurations
                  url: https://frontproxy-front-proxy.platform-mesh-system:6443/services/contentconfigurations
                  # - kubeconfig: /app/kubeconfig/kubeconfig
                  #   name: marketplace
                  #   url: https://frontproxy-front-proxy.platform-mesh-system:6443/services/marketplace
            enabled: true
